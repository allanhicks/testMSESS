boxplot(Index.site101,at=1:length(yrs)+((1:length(yrs))-1))
boxplot(Index.site145,at=(1:length(yrs)+((1:length(yrs))-1))+1,add=T,col="red")
plot(2004:2012,I101/mean(I101),type="l",col="red")
lines(2004:2012,I145/mean(I145),col="blue")
Ind101.scaled <- apply(Index.site101,1,function(x){x/mean(x)})
Ind145.scaled <- apply(Index.site145,1,function(x){x/mean(x)})
Ind101.scaled <- apply(Index.site101,1,function(x){x/mean(x)})
Ind145.scaled <- apply(Index.site145,1,function(x){x/mean(x)})
plot(2004:2012,apply(Ind101.scaled,2,median),type="l",col="red")
lines(2004:2012,apply(Ind145.scaled,2,median),col="blue")
apply(Ind101.scaled,2,median)
Ind101.scaled
Ind101.scaled <- t(apply(Index.site101,1,function(x){x/mean(x)}))
Ind145.scaled <- t(apply(Index.site145,1,function(x){x/mean(x)}))
plot(2004:2012,apply(Ind101.scaled,2,median),type="l",col="red")
lines(2004:2012,apply(Ind145.scaled,2,median),col="blue")
x <- c(1,rep(0,149),poly.ds,poly.pl,poly.mp,poly.st)
names(x) <- colnames(mcmc)
x
yrs <- c("Year2004",names(x)[grep("Year",names(x))])
sites <- c("SiteName101",names(x)[grep("Site",names(x))])
sites145 <- c("SiteName145",names(x)[grep("Site",names(x))])
x.yr <- matrix(rep(x,length(yrs)),ncol=length(yrs),dimnames=list(names(x),yrs))
for(i in 2:ncol(x.yr)) {
    x.yr[i,i] <- 1
}
x.yr
Index.site101 <- inv.logit(as.matrix(mcmc) %*% x.yr)
apply(Index.site101,2,median)
Index.site145 <- inv.logit(as.matrix(mcmc145) %*% x.yr)
apply(Index.site145,2,median)
plot(2004:2012,I101/mean(I101),type="l",col="red")
lines(2004:2012,I145/mean(I145),col="blue")
windows()
Ind101.scaled <- t(apply(Index.site101,1,function(x){x/mean(x)}))
Ind145.scaled <- t(apply(Index.site145,1,function(x){x/mean(x)}))
plot(2004:2012,apply(Ind101.scaled,2,median),type="l",col="red")
lines(2004:2012,apply(Ind145.scaled,2,median),col="blue")
rm(list=ls())
library(gtools)
load("C:\\NOAA2013\\HookAndLineSurvey\\Results\\Vermillion\\VermC.NFT.Final.glm.dmp")
dat <- VermC.NFT.Final.glm
rm(VermC.NFT.Final.glm)
load("C:\\NOAA2013\\HookAndLineSurvey\\Results\\Vermillion\\VermC.Final.MCMC.2012.2.5M @@ Pre-revised @@.dmp")
mcmc <- VermC.Final.MCMC.2012.2.5M$MCMC
rm(VermC.Final.MCMC.2012.2.5M)
poly.ds <- predict(poly(dat$data$DriftSpeedDrop.k,3),1.38)
poly.pl <- predict(poly(dat$data$PctLite,3),0.4)
poly.mp <- predict(poly(dat$data$MoonPct,3),40)
poly.st <- predict(poly(dat$data$SSTDrop.C,3),18)
#x <- c(1,rep(0,149),1.38,1.38^2,1.38^3,0.4,0.4^2,0.4^3,40,40^2,40^3,18,18^2,18^3)
x <- c(1,rep(0,149),poly.ds,poly.pl,poly.mp,poly.st)
names(x) <- colnames(mcmc)
yrs <- c("Year2004",names(x)[grep("Year",names(x))])
sites <- c("SiteName101",names(x)[grep("Site",names(x))])
x.yr <- matrix(rep(x,length(yrs)),ncol=length(yrs),dimnames=list(names(x),yrs))
for(i in 2:ncol(x.yr)) {
    x.yr[i,i] <- 1
}
Index.site <- array(NA,dim=c(nrow(mcmc),length(yrs),length(sites)))
Index.site[,,1] <- inv.logit(as.matrix(mcmc) %*% x.yr)
for(i in 2:length(sites)) {
    tmp <- x.yr
    tmp[8+i,] <- 1
    Index.site[,,i] <- inv.logit(as.matrix(mcmc) %*% tmp)
}
plot(2004:2012,apply(Index.site[,,1],2,mean),type="l",col="red",ylim=range(Index.site))
for(i in 2:length(sites)) {
    lines(2004:2012,apply(Index.site[,,i],2,mean),type="l",col=rgb(0,0,0,0.3),ylim=range(Index.site))
}
ind287 <- which(sites=="SiteName287")
ind287
y <- Index.site
plot(yrs,y["133",],col="red",type="l",xlab="Year",ylab="Example Standardized Index")
lines(yrs,y["145",],col="blue")
legend("bottomright",c("Site 133: Lowest occurrence","Site 145: Highest occurrence","Average of all sites"),col=c("red","blue","green3"),lty=1,lwd=c(1,1,3))
avgy <- apply(y,2,mean)
lines(yrs,avgy,lwd=2,col="green3")
lines(yrs,y["287",],col="blue")
dimnames(y)
ind133 <- which(sites=="SiteName133")
ind145 <- which(sites=="SiteName145")
ind287 <- which(sites=="SiteName287")
y <- Index.site
plot(yrs,y[,,ind133],col="red",type="l",xlab="Year",ylab="Example Standardized Index")
lines(yrs,y[,,ind145],col="blue")
yrs <- 2004:2012
y <- Index.site
plot(yrs,y[,,ind133],col="red",type="l",xlab="Year",ylab="Example Standardized Index")
apply(y[,,ind133],2,median)
table(dat$data$Year,dat$data$SiteName)
table(dat$data$NumVermC,dat$data$SiteName)
apply(table(dat$data$NumVermC,dat$data$SiteName),2,function(x){x/sum(x)})
apply(table(dat$data$NumVermC,dat$data$SiteName),2,function(x){x[2]/sum(x)})
x <- apply(table(dat$data$NumVermC,dat$data$SiteName),2,function(x){x[2]/sum(x)})
sort(x)
ind333 <- which(sites=="SiteName333")
ind145 <- which(sites=="SiteName145")
ind287 <- which(sites=="SiteName287")
yrs <- 2004:2012
y <- Index.site
plot(yrs,apply(y[,,ind333],2,median),col="red",type="l",xlab="Year",ylab="Example Standardized Index")
ind333 <- which(sites=="SiteName333")
ind145 <- which(sites=="SiteName145")
ind287 <- which(sites=="SiteName287")
yrs <- 2004:2012
y <- apply(Index.site,1:2,median)
dim(y)
yrs <- 2004:2012
y <- apply(Index.site,2:3,median)
dim(y)
y[,ind333]
yrs <- 2004:2012
y <- apply(Index.site,2:3,median)
plot(yrs,y[,ind333]/mean(y[,ind333]),col="red",type="l",xlab="Year",ylab="Example Standardized Index")
lines(yrs,y[,,ind145]/mean(y[,,ind145]),col="blue")
lines(yrs,y[,ind145]/mean(y[,ind145]),col="blue")
yrs <- 2004:2012
y <- apply(Index.site,2:3,median)
plot(yrs,y[,ind333]/mean(y[,ind333]),col="red",type="l",xlab="Year",ylab="Example Standardized Index")
lines(yrs,y[,ind145]/mean(y[,ind145]),col="blue")
legend("bottomright",c("Site 333: Lowest occurrence","Site 145: Highest occurrence","Average of all sites","Site 287"),col=c("red","blue","green3","black"),lty=1,lwd=c(1,1,2,3))
avgy <- apply(y,2,mean)
lines(yrs,avgy,lwd=2,col="green3")
lines(yrs,y[,ind287]/mean(y[,ind287]),col="black")
avgy <- apply(y,2,mean)
lines(yrs,avgy,lwd=2,col="green3")
lines(yrs,y[,ind287]/mean(y[,ind287]),col="black",lwd=3)
avgy
dim(y)
avgy <- apply(y,1,mean)
lines(yrs,avgy,lwd=2,col="green3")
avgy
lines(yrs,avgy/mean(avgy),lwd=2,col="green3")
yrs <- 2004:2012
y <- apply(Index.site,2:3,median)
plot(yrs,y[,ind333]/mean(y[,ind333]),col="red",type="l",xlab="Year",ylab="Example Standardized Index")
lines(yrs,y[,ind145]/mean(y[,ind145]),col="blue")
legend("topleft",c("Site 333: Lowest occurrence","Site 145: Highest occurrence","Average of all sites","Site 287"),col=c("red","blue","green3","black"),lty=1,lwd=c(1,1,2,3))
avgy <- apply(y,1,mean)
lines(yrs,avgy/mean(avgy),lwd=2,col="green3")
lines(yrs,y[,ind287]/mean(y[,ind287]),col="black",lwd=3)
ind333 <- which(sites=="SiteName333")
ind145 <- which(sites=="SiteName145")
ind287 <- which(sites=="SiteName287")
yrs <- 2004:2012
y <- apply(Index.site,2:3,median)
y
yrs <- 2004:2012
y <- apply(Index.site,2:3,median)
plot(yrs,y[,1]/mean(y[,1]),col="red",type="l",xlab="Year",ylab="Example Standardized Index")
for(i in 2:ncol(y)) {
    lines(yrs,y[,i]/mean(y[,i]),col=rgb(0,0,0,0.3))
}
avgy <- apply(y,1,mean)
avgy
avgy <- apply(y,1,mean)
lines(yrs,avgy/mean(avgy),col=rgb(0,1,0,0.3))
dim(Index.site)
ystand <- apply(Index.site,c(1,3),function(x){x/mean(x)})
dim(ystand)
apply(ystand,2:3,mean)
unique(apply(ystand,2:3,mean))_
unique(apply(ystand,2:3,mean))
ystand <- apply(Index.site,c(1,3),function(x){x/mean(x)})
yrs <- 2004:2012
y <- ystand
plot(yrs,y[,1],col="red",type="l",xlab="Year",ylab="Example Standardized Index")
dim(ystand)
y <- apply(ystand,c(1,3),median)
y
dim(y)
apply(y,2,mean)
savehistory(); file.show( paste(getwd(), "\\.Rhistory", sep="") )
postsParNames <- c("NatM_p_1_Fem_GP_1","SR_LN.R0.","SR_BH_steep","Early_",      "Main_",  "ForeRecr",          "Q_extraSD_2_Acoustic_Survey","AgeSel_1P_","AgeSel_2P_","_Fishery_DEVadd_")
parFileNames <- c("MGparm[1]",         "SR_parm[1]","SR_parm[2]","recdev_early","recdev1","Fcast_recruitments","Q_parm[1]",                  "selparm[3]","selparm[25]","selparm_dev")
setwd("C:\\NOAA2014\\Hake\\MSE\\testMSESS\\OperatingModels\\test\\mcmcDev2")
parIn="ss3.par"
par2Rlist <- function(fn) {
    #reads in ss3.par and converts it to a list with names
    #inspired by Steve Martell's code on the admb-project site
    ifile <- readLines(fn)
    idx <- grep("#",ifile)
    vnam <- ifile[idx] #list names
    nv <- length(vnam) #number of objects
    A <- vector(mode="list",length=nv)
    names(A) <- vnam
    ir <- 0
    for(i in 1:nv) {
        ir <- match(vnam[i],ifile)
        if(i!=nv) irr <- match(vnam[i+1],ifile) else irr=length(ifile)+1 #next row
        dum <- NA
        if(irr-ir==2) dum <- as.double(scan(fn,skip=ir,nlines=1,quiet=T,what=""))
        if(irr-ir>2) dum <- as.matrix(read.table(fn,skip=ir,nrow=irr-ir-1,fill=T))
        if(is.numeric(dum)) { #Logical test to ensure dealing with numbers
            A[[vnam[i]]]=dum
        }
    }
    return(A)
}
tmp <- par2Rlist("ss3.par")
names(tmp)
?readLines
?scan
substring(names(tmp),2)
pars <- tmp)
pars <- tmp
pars[["# Fcast_recruitments:"]]
length(pars[["# Fcast_recruitments:"]])
    pars[["# Fcast_recruitments:"]] <- c(pars[["# Fcast_recruitments:"]],0)   #add a dummy recr on to forecast (this includes late devs)
length(pars)
pars[["# Fcast_recruitments:"]]
t(pars[["# selparm_dev:"]])
newDevs <- simulateSelexDevs(t(pars[["# selparm_dev:"]]))
simulateSelexDevs <- function(devs,nForeYrs=1) {
  #devs is a matrix with years down rows and columns as age
  covDevs <- cov(devs)
  newDevs <- mvrnorm(nForeYrs, rep(0,nrow(covDevs)), covDevs)
  return(newDevs)
}
        newDevs <- simulateSelexDevs(t(pars[["# selparm_dev:"]]))
library(MASS)
        newDevs <- simulateSelexDevs(t(pars[["# selparm_dev:"]]))
newDevs
pars[["# selparm_dev:"]]
cbind(pars[["# selparm_dev:"]],newDevs)
source("C:/NOAA2014/Hake/MSE/testMSESS/Rscripts/mseSS.r")
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- F
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- F
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- F
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
scenarios[[scenario]]$fullPath
scenarios[[scenario]]$omFullPath
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- F
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- F
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- F
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
getSelexByFleet
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
selexFishery
ageLabels
names(output)
out$ageselex
grep("selex",names(output))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
fullPathSimPar
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
tmpParsInd
pars
pars[[tmpParsInd]]
length(parFileNames)
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
parFileNames
i
parFileNames[i]
i
parFileNames[i]
i
parFileNames[i]
i
parFileNames[i]
i
parFileNames[i]
i
parFileNames[i]
i
parFileNames[i]
i
parFileNames[i]
i
1:length(parFileNames)
updateParFile
tmpParsInd
parFileNames[i]
names(pars)
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
parFileNames[i]
tmpParsInd
pars[[tmpParsInd]]
is.matrix(pars[[tmpParsInd]]
)
length(pars[[tmpParsInd]]) != length(tmpPosts)
parFileNames[i] == "Fcast_recruitments"
1:length(parFileNames)
i
fullPathSimPar
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
names(output)
output$derived_quant
output <- SS_output(dir=simDat$fullPath,covar=F,verbose=verbose,printstats=printstats)
desDataFile
srcDataFile
srcCtlFile
natageFile
names(output)
sort(names(output))
grep("atage",names(output))
names(output)
names(output)[grep("atage",names(output))]
    output <- SS_output(dir=simDat$fullPath,covar=F,verbose=verbose,printstats=printstats)
names(output)[grep("atage",names(output))]
getwd()
    output <- SS_output("../Scenarios/test/simulations",covar=F,verbose=verbose,printstats=printstats)
    output <- SS_output("../Scenarios/test/simulations",covar=F,verbose=F,printstats=F)
names(output)[grep("atage",names(output))]
otuput$natage
output$natage
head(output$natage)
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
natage[natage$mceval==simNum & natage$Yr==assessYr,.NATAGE_MIN_AGE_IND:.NATAGE_MAX_AGE_IND]
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
head(output$natage)
direc <- "C:\\NOAA2014\\Hake\\MSE"
setwd(paste(direc,"testMSESS\\Rscripts",sep="/"))
if(exists("scen")) rm(scen)  
source("mseSS.r")  #if scen exists it will run the scenario
printDebug <- T
out <- runMSE(continue=T, useSystem=F, verbose=F, printstats=F, sendEmailUpdates=F, scen=1,
                emailAddress="yourname@gmail.com", emailPassword="",
                r4ssDir=paste(direc,"r4ss",sep="/"))
simDat$natage
natage[natage$mceval==simNum & natage$Yr==assessYr,.NATAGE_MIN_AGE_IND:.NATAGE_MAX_AGE_IND]
savehistory(); file.show( paste(getwd(), "\\.Rhistory", sep="") )
